@using HTSV.FE.Models.Common
@using HTSV.FE.Models.HoatDong
@model PaginatedList<DangKyDTO>

@{
    ViewData["Title"] = "Danh sách đăng ký hoạt động";
    string userRole = Context.Session.GetString("Role") ?? "Member";
    if (User.IsInRole("Admin") || userRole == "Admin")
    {
        Layout = "~/Views/Shared/_AdminLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
}

<div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5">
    <div class="mb-1 w-full">
        <div class="mb-4">
            <nav class="flex mb-4" aria-label="Breadcrumb">
                <ol class="inline-flex items-center space-x-1 md:space-x-3">
                    <li class="inline-flex items-center">
                        <a href="/" class="text-gray-700 hover:text-primary">
                            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"/>
                            </svg>
                            Trang chủ
                        </a>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
                            </svg>
                            <span class="text-gray-400">Danh sách đăng ký</span>
                        </div>
                    </li>
                </ol>
            </nav>
            <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl">Danh sách đăng ký hoạt động</h1>
        </div>
        <div class="sm:flex">
            <div class="flex items-center gap-2">
                @if (User.IsInRole("Admin"))
                {
                    <button onclick="showExportModal()" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-green-600 hover:bg-green-700">
                        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
                        </svg>
                        Xuất Excel
                    </button>
                }
            </div>
            <div class="flex items-center ml-auto space-x-2 sm:space-x-3">
                <form class="sm:pr-3" action="" method="get">
                    <label for="searchTerm" class="sr-only">Search</label>
                    <div class="relative w-48 mt-1 sm:w-64 xl:w-96">
                        <input type="text" name="searchTerm" id="searchTerm" value="@Context.Request.Query["searchTerm"]" 
                               class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary focus:border-primary block w-full p-2.5"
                               placeholder="Tìm kiếm...">
                        <button type="submit" class="absolute top-0 right-0 p-2.5 text-sm font-medium text-white bg-primary rounded-r-lg border border-primary hover:bg-primary-dark focus:ring-4 focus:outline-none focus:ring-primary/50">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                            </svg>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="flex flex-col">
    <div class="overflow-x-auto">
        <div class="inline-block min-w-full align-middle">
            <div class="overflow-hidden shadow">
                <table class="min-w-full divide-y divide-gray-200 table-fixed">
                    <thead class="bg-gray-100">
                        <tr>
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase">
                                STT
                            </th>
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase">
                                Người đăng ký
                            </th>
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase">
                                Hoạt động
                            </th>
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase">
                                Thời gian đăng ký
                            </th>
                            @if (User.IsInRole("Admin"))
                            {
                                <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase">
                                    Thao tác
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @{
                            var stt = (Model.PageIndex - 1) * Model.PageSize;
                        }
                        @foreach (var item in Model.Items)
                        {
                            stt++;
                            <tr class="hover:bg-gray-100">
                                <td class="p-4 text-sm font-normal text-gray-500 whitespace-nowrap">
                                    @stt
                                </td>
                                <td class="p-4 text-sm font-normal text-gray-500 whitespace-nowrap">
                                    @item.TenNguoiDangKy
                                </td>
                                <td class="p-4 text-sm font-normal text-gray-500 whitespace-nowrap">
                                    @item.TenHoatDong
                                </td>
                                <td class="p-4 text-sm font-normal text-gray-500 whitespace-nowrap">
                                    @item.ThoiGianDangKy.ToString("dd/MM/yyyy HH:mm")
                                </td>
                                @if (User.IsInRole("Admin"))
                                {
                                    <td class="p-4 space-x-2 whitespace-nowrap">
                                        <button onclick="deleteDangKy(@item.Id)" 
                                                class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:ring-red-200">
                                            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
                                            </svg>
                                        </button>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Phân trang -->
@if (Model.TotalPages > 1)
{
    <div class="flex items-center justify-between pt-3">
        <div class="flex justify-between sm:hidden">
            @if (Model.HasPreviousPage)
            {
                <a href="@Url.Action("Index", new { page = Model.PageIndex - 1, searchTerm = Context.Request.Query["searchTerm"] })" 
                   class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50">
                    Trước
                </a>
            }
            @if (Model.HasNextPage)
            {
                <a href="@Url.Action("Index", new { page = Model.PageIndex + 1, searchTerm = Context.Request.Query["searchTerm"] })" 
                   class="relative inline-flex items-center px-4 py-2 ml-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50">
                    Sau
                </a>
            }
        </div>
        <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
            <div>
                <p class="text-sm text-gray-700">
                    Hiển thị từ <span class="font-medium">@(((Model.PageIndex - 1) * Model.PageSize) + 1)</span>
                    đến <span class="font-medium">@(((Model.PageIndex - 1) * Model.PageSize) + Model.Items.Count)</span>
                    trong tổng số <span class="font-medium">@Model.TotalCount</span> kết quả
                </p>
            </div>
            <div>
                <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                    @if (Model.HasPreviousPage)
                    {
                        <a href="@Url.Action("Index", new { page = Model.PageIndex - 1, searchTerm = Context.Request.Query["searchTerm"] })" 
                           class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    }
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <a href="@Url.Action("Index", new { page = i, searchTerm = Context.Request.Query["searchTerm"] })" 
                           class="@(i == Model.PageIndex ? "relative z-10 inline-flex items-center bg-primary px-4 py-2 text-sm font-semibold text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary" : "relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0")">
                            @i
                        </a>
                    }
                    @if (Model.HasNextPage)
                    {
                        <a href="@Url.Action("Index", new { page = Model.PageIndex + 1, searchTerm = Context.Request.Query["searchTerm"] })" 
                           class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    }
                </nav>
            </div>
        </div>
    </div>
}

<!-- Modal Xuất Excel -->
<div id="exportModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <div class="flex items-center justify-between pb-3">
                <h3 class="text-lg font-medium text-gray-900">Xuất danh sách đăng ký</h3>
                <button onclick="closeExportModal()" class="text-gray-400 hover:text-gray-500">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div class="mt-4 space-y-4">
                <div>
                    <label for="hoatDongId" class="block text-sm font-medium text-gray-700 mb-1">Hoạt động</label>
                    <select id="hoatDongId" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50">
                        <option value="">-- Chọn hoạt động --</option>
                    </select>
                </div>
                <div>
                    <label for="maSinhVien" class="block text-sm font-medium text-gray-700 mb-1">Mã sinh viên</label>
                    <input type="text" id="maSinhVien" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50" placeholder="Nhập mã sinh viên">
                </div>
                <div class="flex justify-end space-x-3 mt-6">
                    <button onclick="closeExportModal()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400">
                        Hủy
                    </button>
                    <button onclick="confirmExport()" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500">
                        Xuất Excel
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    
    <script>
        // Cấu hình toastr
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
        }

        function showExportModal() {
            document.getElementById('exportModal').classList.remove('hidden');
            loadHoatDongs();
        }

        function loadHoatDongs() {
            fetch('@Url.Action("GetHoatDongs")', {
                headers: {
                    'Authorization': 'Bearer ' + '@Context.Session.GetString("TokenUser")'
                }
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    const select = document.getElementById('hoatDongId');
                    // Clear existing options except the first one
                    select.innerHTML = '<option value="">-- Chọn hoạt động --</option>';
                    
                    // Add new options
                    result.data.forEach(hoatDong => {
                        const option = document.createElement('option');
                        option.value = hoatDong.id;
                        option.textContent = hoatDong.tenHoatDong;
                        select.appendChild(option);
                    });
                } else {
                    toastr.error(result.message || 'Không thể tải danh sách hoạt động');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('Đã xảy ra lỗi khi tải danh sách hoạt động');
            });
        }

        function closeExportModal() {
            document.getElementById('exportModal').classList.add('hidden');
            // Clear inputs
            document.getElementById('hoatDongId').value = '';
            document.getElementById('maSinhVien').value = '';
        }

        function confirmExport() {
            const hoatDongId = document.getElementById('hoatDongId').value;
            const maSinhVien = document.getElementById('maSinhVien').value;

            if (!hoatDongId && !maSinhVien) {
                toastr.warning('Vui lòng nhập ít nhất một điều kiện để xuất danh sách');
                return;
            }

            let url = '@Url.Action("Export", "DangKy")';
            const params = new URLSearchParams();
            
            if (hoatDongId) {
                params.append('hoatDongId', hoatDongId);
            }
            if (maSinhVien) {
                params.append('maSinhVien', maSinhVien);
            }

            if (params.toString()) {
                url += '?' + params.toString();
            }

            // Download file
            fetch(url, {
                headers: {
                    'Authorization': 'Bearer ' + '@Context.Session.GetString("TokenUser")'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.blob();
            })
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = "DanhSachDangKy.xlsx";
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                closeExportModal();
                toastr.success('Xuất file thành công');
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('Có lỗi xảy ra khi xuất file');
            });
        }

        function deleteDangKy(id) {
            if (!confirm('Bạn có chắc chắn muốn xóa đăng ký này?')) {
                return;
            }

            fetch(`/DangKy/Delete/${id}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + '@Context.Session.GetString("TokenUser")'
                }
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    toastr.success('Xóa đăng ký thành công');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    toastr.error(result.message || 'Không thể xóa đăng ký');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('Đã xảy ra lỗi khi xóa đăng ký');
            });
        }
    </script>
} 