@using HTSV.FE.Models.Common
@using HTSV.FE.Models.TinTuc
@model PaginatedList<TinTucViewModel>
@{
    ViewData["Title"] = "Quản lý tin tức";
    string userRole = Context.Session.GetString("Role") ?? "Member";
    if (User.IsInRole("Admin") || userRole == "Admin")
    {
        Layout = "~/Views/Shared/_AdminLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    var token = Context.Session.GetString("TokenUser");
}

@section Styles {
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <style>
        .ql-editor {
            min-height: 200px;
        }
        #newsModal {
            z-index: 9999;
        }
        .modal-content {
            max-height: 80vh;
            overflow-y: auto;
        }
    </style>
}

<div class="container mx-auto px-4">
    <div class="bg-white p-6 rounded-lg shadow-lg">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold">@ViewData["Title"]</h1>
            @if (User.IsInRole("Admin") || userRole == "Admin")
            {
                <button onclick="openCreateModal()" class="bg-primary text-white px-4 py-2 rounded hover:bg-primary-dark">
                    Thêm tin tức mới
                </button>
            }
        </div>

        <!-- Search Section -->
        <div class="mb-6">
            <div class="flex gap-4">
                <input type="text" id="searchInput" placeholder="Tìm kiếm tin tức..." 
                       class="flex-1 border rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-primary">
                <button onclick="search()" class="bg-gray-100 px-4 py-2 rounded hover:bg-gray-200">
                    Tìm kiếm
                </button>
            </div>
        </div>

        <!-- News Table -->
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tiêu đề</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Người đăng</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ngày đăng</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trạng thái</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Thao tác</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                    @foreach (var item in Model.Items)
                    {
                        <tr>
                            <td class="px-6 py-4">
                                <a href="/TinTuc/Details/@item.Id" class="text-primary hover:underline">@item.TieuDe</a>
                            </td>
                            <td class="px-6 py-4">@item.TenNguoiDangTin</td>
                            <td class="px-6 py-4">@item.NgayDang.ToString("dd/MM/yyyy HH:mm")</td>
                            <td class="px-6 py-4">
                                @if (User.IsInRole("Admin") || userRole == "Admin")
                                {
                                    <div class="flex items-center">
                                        <label class="relative inline-flex items-center cursor-pointer">
                                            <input type="checkbox" class="sr-only peer" 
                                                   @(item.TrangThai ? "checked" : "") 
                                                   onchange="updateStatus(@item.Id, this.checked)">
                                            <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                                        </label>
                                    </div>
                                }
                                else
                                {
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @(item.TrangThai ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                        @(item.TrangThai ? "Đã xuất bản" : "Chưa xuất bản")
                                    </span>
                                }
                            </td>
                            <td class="px-6 py-4">
                                <div class="flex space-x-2">
                                    <a href="/TinTuc/Details/@item.Id" class="text-blue-600 hover:text-blue-900">Chi tiết</a>
                                    @if (User.IsInRole("Admin") || userRole == "Admin")
                                    {
                                        <button onclick="openEditModal(@item.Id)" class="text-indigo-600 hover:text-indigo-900">Sửa</button>
                                        <button onclick="deleteNews(@item.Id)" class="text-red-600 hover:text-red-900">Xóa</button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="mt-4 flex justify-between items-center">
            <div class="text-sm text-gray-700">
                Hiển thị <span class="font-medium">@(((Model.PageIndex - 1) * Model.PageSize) + 1)</span> đến <span class="font-medium">@(((Model.PageIndex - 1) * Model.PageSize) + Model.Items.Count)</span> trong tổng số <span class="font-medium">@Model.TotalPages</span> tin tức
            </div>
            <div class="flex gap-2">
                @if (Model.HasPreviousPage)
                {
                    <a href="@Url.Action("Index", new { page = Model.PageIndex - 1, pageSize = Model.PageSize })" 
                       class="px-3 py-1 border rounded hover:bg-gray-100">Trước</a>
                }
                @if (Model.HasNextPage)
                {
                    <a href="@Url.Action("Index", new { page = Model.PageIndex + 1, pageSize = Model.PageSize })" 
                       class="px-3 py-1 border rounded hover:bg-gray-100">Sau</a>
                }
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div id="newsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-5 border w-4/5 shadow-lg rounded-md bg-white modal-content">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium" id="modalTitle">Thêm tin tức mới</h3>
            <button onclick="closeModal()" class="text-gray-400 hover:text-gray-500">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        <form id="newsForm" onsubmit="handleSubmit(event)" class="space-y-4">
            <input type="hidden" id="newsId" value="">
            
            <div>
                <label for="tieuDe" class="block text-sm font-medium text-gray-700">Tiêu đề <span class="text-red-500">*</span></label>
                <input type="text" id="tieuDe" name="tieuDe" required
                       class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary">
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700">Nội dung <span class="text-red-500">*</span></label>
                <div id="editor" class="mt-1"></div>
            </div>

            <div>
                <label for="fileDinhKem" class="block text-sm font-medium text-gray-700">File đính kèm</label>
                <input type="file" id="fileDinhKem" name="fileDinhKem"
                       class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-primary file:text-white hover:file:bg-primary-dark">
                <p class="mt-1 text-sm text-gray-500">Chấp nhận các file: .pdf, .doc, .docx, .xls, .xlsx, .jpg, .jpeg, .png</p>
                <div id="currentFileDisplay" class="mt-2 hidden">
                    <p class="text-sm text-gray-600">File hiện tại: <span id="currentFileName" class="font-medium"></span></p>
                </div>
            </div>

            <div>
                <label class="inline-flex items-center">
                    <input type="checkbox" id="trangThai" name="trangThai" class="rounded border-gray-300 text-primary focus:ring-primary">
                    <span class="ml-2">Xuất bản ngay</span>
                </label>
            </div>

            <div class="flex justify-end gap-4">
                <button type="button" onclick="closeModal()" 
                        class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                    Hủy
                </button>
                <button type="submit"
                        class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                    Lưu
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">

    <script>
        const token = '@Html.Raw(token)';
        let quill;
        let currentId = null;
        let currentFile = null;

        // Cấu hình toastr
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": "3000"
        }

        // Khởi tạo Quill editor
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Initializing Quill editor...');
            try {
                quill = new Quill('#editor', {
                    theme: 'snow',
                    modules: {
                        toolbar: [
                            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                            ['bold', 'italic', 'underline', 'strike'],
                            [{ 'color': [] }, { 'background': [] }],
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            [{ 'align': [] }],
                            ['link', 'image'],
                            ['clean']
                        ]
                    },
                    placeholder: 'Nhập nội dung tin tức...'
                });
                console.log('Quill editor initialized successfully');

                // Attach form submit handler using jQuery
                $('#newsForm').on('submit', function(e) {
                    console.log('Form submitted via jQuery handler');
                    handleSubmit(e);
                });
            } catch (error) {
                console.error('Error initializing Quill:', error);
            }
        });

        function openCreateModal() {
            console.log('Opening create modal...');
            try {
                currentId = null;
                currentFile = null;
                document.getElementById('modalTitle').textContent = 'Thêm tin tức mới';
                document.getElementById('newsForm').reset();
                if (quill) {
                    quill.root.innerHTML = '';
                } else {
                    console.error('Quill editor not initialized');
                }
                document.getElementById('currentFileDisplay').classList.add('hidden');
                document.getElementById('newsModal').classList.remove('hidden');
                console.log('Create modal opened successfully');
            } catch (error) {
                console.error('Error opening create modal:', error);
                toastr.error('Lỗi khi mở form tạo mới');
            }
        }

        async function openEditModal(id) {
            console.log('Opening edit modal for ID:', id);
            try {
                currentId = id;
                document.getElementById('modalTitle').textContent = 'Cập nhật tin tức';
                document.getElementById('newsModal').classList.remove('hidden');

                console.log('Fetching news data...');
                const response = await fetch(`http://localhost:5032/api/TinTuc/${id}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                console.log('API Response:', response);
                if (response.ok) {
                    const result = await response.json();
                    console.log('News data:', result);
                    
                    if (result.success) {
                        const data = result.data;
                        document.getElementById('newsId').value = data.id;
                        document.getElementById('tieuDe').value = data.tieuDe;
                        if (quill) {
                            quill.root.innerHTML = data.noiDung;
                        } else {
                            console.error('Quill editor not initialized');
                        }
                        document.getElementById('trangThai').checked = data.trangThai;
                        
                        if (data.fileDinhKem) {
                            currentFile = data.fileDinhKem;
                            document.getElementById('currentFileName').textContent = data.fileDinhKem.split('/').pop();
                            document.getElementById('currentFileDisplay').classList.remove('hidden');
                        } else {
                            currentFile = null;
                            document.getElementById('currentFileDisplay').classList.add('hidden');
                        }
                        console.log('Edit modal populated successfully');
                    }
                }
            } catch (error) {
                console.error('Error in openEditModal:', error);
                toastr.error('Đã xảy ra lỗi khi tải thông tin tin tức');
            }
        }

        function closeModal() {
            document.getElementById('newsModal').classList.add('hidden');
            document.getElementById('newsForm').reset();
            quill.root.innerHTML = '';
            currentId = null;
            currentFile = null;
            document.getElementById('currentFileDisplay').classList.add('hidden');
        }

        async function handleSubmit(event) {
            console.log('=== FORM SUBMISSION START ===');
            event.preventDefault();
            console.log('Form submission prevented');
            
            try {
                if (!quill) {
                    throw new Error('Quill editor not initialized');
                }

                const tieuDe = document.getElementById('tieuDe').value.trim();
                const noiDung = quill.root.innerHTML.trim();
                console.log('Form data:', {
                    tieuDe,
                    noiDung: noiDung.substring(0, 100) + '...',
                    currentId,
                    hasFile: document.getElementById('fileDinhKem').files.length > 0
                });
                
                if (!tieuDe) {
                    console.log('Title validation failed');
                    toastr.error('Vui lòng nhập tiêu đề');
                    return;
                }

                if (!noiDung) {
                    console.log('Content validation failed');
                    toastr.error('Vui lòng nhập nội dung');
                    return;
                }

                const fileInput = document.getElementById('fileDinhKem');
                let filePath = currentFile;
                console.log('File handling:', {
                    currentFile,
                    newFileSelected: fileInput.files.length > 0
                });

                if (fileInput.files.length > 0) {
                    console.log('Uploading new file...');
                    const formData = new FormData();
                    formData.append('file', fileInput.files[0]);

                    const uploadResponse = await fetch('http://localhost:5032/api/TinTuc/upload', {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        },
                        body: formData
                    });

                    console.log('Upload response:', uploadResponse);
                    const uploadResult = await uploadResponse.json();
                    console.log('Upload result:', uploadResult);

                    if (uploadResult.success) {
                        filePath = uploadResult.data;
                        console.log('File uploaded successfully:', filePath);
                    } else {
                        throw new Error(uploadResult.message || 'Lỗi upload file');
                    }
                }

                const data = {
                    tieuDe,
                    noiDung,
                    fileDinhKem: filePath || '',
                    trangThai: document.getElementById('trangThai').checked
                };
                console.log('Submitting data to API:', {
                    url: currentId ? `http://localhost:5032/api/TinTuc/${currentId}` : 'http://localhost:5032/api/TinTuc',
                    method: currentId ? 'PUT' : 'POST',
                    data: {...data, noiDung: data.noiDung.substring(0, 100) + '...'}
                });

                const response = await fetch(
                    currentId ? `http://localhost:5032/api/TinTuc/${currentId}` : 'http://localhost:5032/api/TinTuc',
                    {
                        method: currentId ? 'PUT' : 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    }
                );

                console.log('API response:', response);
                const result = await response.json();
                console.log('API result:', result);

                if (result.success) {
                    toastr.success(currentId ? 'Cập nhật tin tức thành công' : 'Thêm tin tức mới thành công');
                    console.log('Operation successful, reloading page...');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    throw new Error(result.message || 'Lỗi từ API');
                }
            } catch (error) {
                console.error('=== ERROR IN FORM SUBMISSION ===');
                console.error('Error details:', error);
                console.error('Stack trace:', error.stack);
                toastr.error(`Đã xảy ra lỗi: ${error.message}`);
            }
            console.log('=== FORM SUBMISSION END ===');
        }

        async function updateStatus(id, status) {
            try {
                const response = await fetch(`http://localhost:5032/api/TinTuc/${id}/trang-thai`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(status)
                });

                const result = await response.json();
                if (result.success) {
                    toastr.success('Cập nhật trạng thái thành công');
                } else {
                    toastr.error(result.message || 'Không thể cập nhật trạng thái');
                    // Revert the checkbox state
                    event.target.checked = !status;
                }
            } catch (error) {
                console.error('Error updating status:', error);
                toastr.error('Đã xảy ra lỗi khi cập nhật trạng thái');
                // Revert the checkbox state
                event.target.checked = !status;
            }
        }

        async function deleteNews(id) {
            if (!confirm('Bạn có chắc chắn muốn xóa tin tức này?')) {
                return;
            }

            try {
                const response = await fetch(`http://localhost:5032/api/TinTuc/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                const result = await response.json();
                if (result.success) {
                    toastr.success('Xóa tin tức thành công');
                    window.location.reload();
                } else {
                    toastr.error(result.message || 'Không thể xóa tin tức');
                }
            } catch (error) {
                console.error('Error deleting news:', error);
                toastr.error('Đã xảy ra lỗi khi xóa tin tức');
            }
        }

        function search() {
            const searchTerm = document.getElementById('searchInput').value;
            window.location.href = `/TinTuc?searchTerm=${encodeURIComponent(searchTerm)}`;
        }

        // Handle Enter key in search input
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                search();
            }
        });
    </script>
} 